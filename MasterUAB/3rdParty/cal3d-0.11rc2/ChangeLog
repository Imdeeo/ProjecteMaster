o-----------------------------------------------------------------------------o
|                             C h a n g e L o g                               |
o-----------------------------------------------------------------------------o

o-----------------------------------------------------------------------------o
| Version 0.11.0 ( ?? june 2006) 
o-----------------------------------------------------------------------------o
	
  - Make the list of the root bones a vector. So the root bones can be acceded 
    in C wrapper.
  - Add some missing function to access to private variables.
  - Add cal3d_converter to the default distribution with manual page and file format
    description (tools subdirectory is therefore removed)
  - The destructor of CalModel is now virtual.
  - Made CalModel noncopyable to prevent shallow pointer copying bugs.
  - Use a RefCounted base class and RefPtr smart pointers to hold RefCounted objects.
  - Make CalModel destructor nonvirtual 
  - Improve bounding boxes calculation performance.
  - Update the C wrapper.
  - Add some function to rotate around axis during the loading.
  - When a cycle animation is played, ensure that the last post equals the first pose.
  - Extended callback mechanism to pass user data directly instead of making
    the callback query for it.  This means the callback executable does not have
    to link with cal3d.lib and makes many things simpler in CS context.
    Also worked around a bug (feature?) in the mixer which thinks that
    m_AnimDuration is always 0 for AnimActions.  Now the callback uses the
    internal time counter of the animation, which is probably more consistent
    anyway.
  - VC6 and automake fixes.
  - 64bit compatibility fixes.
  - Patch for reading correctly raw texture on a Big endian cpu (for Mac).
  - Fixed bug in updating current anim time when time factor is set to negative.
  - Correction in max exporters.
  - Update the glew (The OpenGL Extension Wrangler Library).
  - Made the refcounted classes derive from RefCounted, and manage
    their lifetimes with RefPtr smart pointers.
  - Put TinyXML into the cal3d namespace so it doesn't conflict with other
    libraries linking with their own TinyXML.
  - Fixed bug in updating current anim time when time factor is set to negative,
    which resuilted in anim times like -32 instead of between 0 and 2 seconds, 
    for example.  This threw the bone extrapolations way off and made the model
    look like garbage until the anim time got back in the right zone. (Keith Fulton)
  - GNU/Linux compilation / packaging fixes (-DCAL_16BIT_INDICES is included if
    relevant in the .pc)
	
o-----------------------------------------------------------------------------o
| Version 0.10.0 ( 12 january 2005) 
o-----------------------------------------------------------------------------o
  
  - CalModel::setAbstractMixer and CalAbstractMixer to enable third
    party mixers.
  - Symbolic names for coreMaterial, coreMesh, coreAnimations loaded
    by coremodel.{h,cpp}
  - Add functions to control force of the spring system
  - CalHardwareModel : a object to store and to compute information
    needed to do hardware vertex skinning.
  - Add a time factor to allow reverse time of sync animation.
  - Most of the math functions are now inline.  
  - Add an option to stop a action animation at the end.
  - Add functions to rescale a core model, 
    but this can be done only before creating the CalModel.
  - Fix in the XML loader
  - Add a function to compute the global bounding box of the model.
  - Rename calculateBoundingBox to calculateBoundingBoxes.
  - Add reference counting. Core* objects can be
    now shared between several coremodel correctly.
  - Modify the XML file format to be XML valid
  - Added animation callbacks.
  - Added Maya exporter.
  - create/destroy functions removed.
  - Add a "stride" argument to getVertices(), getNormals() ...
  
o-----------------------------------------------------------------------------o
| Version 0.9.1 ( 29. November 2003) 
o-----------------------------------------------------------------------------o
  - Modifications to the loader to accomplish the 
    X axis (Y/Z) rotation from Keith Fulton <keith@paqrat.com>
  - Implementation of UV coord inversion from Keith Fulton  
  - Implemented loading from generic "data sources", which will allow the
    loading of Cal3d objects from istreams and memory buffers
  - Implementation of mesh morph targets from old_belge
  - Switched object constructors to use initializer lists for performance
    optimization
  - Implementation of Bounding Box calculations

o-----------------------------------------------------------------------------o
| Version 0.9 ( 6. August 2003)                                                 |
o-----------------------------------------------------------------------------o

  - Experimental tangent/texture space support (from the idea of 'Josh' code)
  - XML text file format
  - Tiny Xml is used for parsing XML file format
  - Update of the C wrapper
  - A tutorial and a FAQ
  - A better build system:
    Put all of libtool's m4 macros into Cal3D's acinclude.m4. This change
    allows us to be compatible with both older (2.13) and newer (2.5+)
    versions of autoconf.
    Added the autogen.sh script
  - Removed building of the "dummy app" because there is no need for it.
  - Added --with-cxx and --with-cc flags to force the use of a particular
    C/C++ compiler
  - Added functions to aid in dynamic motion programming :
    CalBone::setCoreState() sets a bone's translation and rotation to be the
    default values specified by the core bone.
    CalBone::setCoreStateRecursive() performs the same operation, but applies
    the function recursively to all of a bone's descendents as well.
  - Added setRotation and setTranslation functions to the bone to use for
    manual overriding of bone transforms.
  - Added animation helper functions to CalCoreModel class
  - Added a function to create bone "helpers" analogous to the animation
    helpers.
  - patch from aegis:
    Changes the coretrack's map containing keyframes to a vector. This
    prevents a crashing problem in Windows.
    Quaternion inversion also enhanced.
  - Added an == operator for the CalVector class for equality checking.
  - FIX : CalSubmesh::Destroy() don't free the objects if springs system
  - Functions ::disableInternalData, to disable internal data, this is
    used also disable springs systems
  - Correct all the warning with VS.NET
  - Add a trick to avoid the little pause that can happen at the end of an animation.
    This can also be used to modified an animation that don't loop perfectly
    you just need to add some time with setDuration function, this extra time
    will be used to blend between the last frame and the first frame.
  - Added option to NOT normalize the normal vectors when updating the
    physique.
  - Big/Little endian things
  - Added invert() function to CalQuaternion class.
  - Added copy constructor for the CalRenderer class.
    We need this in order to perform multi-pipe parallel rendering of a model.
  - Small optimizations
 

o-----------------------------------------------------------------------------o
| Version 0.8 (29. August 2002)                                               |
o-----------------------------------------------------------------------------o

  - Optional support for 16-bit indices (default 32-bit)
  - Added functions, Cal3D is now "D3D friendly"
  - Added support for file loading on big endian computers
  - Optimized bone transformations with CalMatrix
  - New CalMatrix class (Thanks to 'josh'!)
  - Completely revamped the automake/autoconf setup.
  - Moved the 'cal3d.doxygen' file into the 'docs' subdirectory where it
    actually belongs.
  - Added a pure C wrapper to Cal3D. This should allow non C++ applications to
    link with it now. (Thanks to Tomek Grudzinski!)
  - Changed the error codes in CalError and the type and state codes in
    CalAnimation to an enum structure.
  - Changed the interpolation calculations in CalCoretrack::getState() so that
    the motion wraps are handled like in the 3d modellers.
  - Tagged some forgotten friend functions of the CalVector and CalQuaternion
    classes as exported.


o-----------------------------------------------------------------------------o
| Version 0.7 (5. January 2002)                                               |
o-----------------------------------------------------------------------------o

  - The header files of Cal3D are now installed to '/usr/local/include/cal3d'
    when executing the 'make install' command. (Thanks to Brandon Ehle!)
  - The skeleton pose is now set to the initial state when no active animation
    exists. (Thanks to Brandon Ehle!)
  - Enhanced the CalVector and CalQuaternion class with a great number of
    operators. (Thanks to Wolfgang Scheicher!)
  - CalVector is now used as type of the vertex position and normal data in
    the CalCoreSubmesh and CalSubmesh class.
  - Revamped the animation pipeline: Added a CalPhysique helper class and a
    CalSpringSystem class.
  - Experimental cloth animation system implemented in the CalSpringSystem
    class. (Thanks to Wolfgang Scheicher!)
  - Changed the whole bone influence system to a localized bone transformation
    approach. This was needed for the planned cloth animation system and for a
    better vertex shader support.
  - Moved the 'weight' member variable and its accessor from the derived
    classes to the CalAnimation class.
  - Removed the unused 'duration' argument from the CalLoader::loadCoreTrack()
    and CalSaver::saveCoreTrack() functions.
  - Moved the setMaterialSet() function from the CalModel class to the
    CalRenderer class.
  - Relicensed the library under the LGPL (GNU Lesser General Public License).
  - CalCoreSkeleton::addCoreBone() inserts root core bones automatically into
    the root core bone list now. The function addRootCoreBoneId() was removed.


o-----------------------------------------------------------------------------o
| Version 0.6 (4. August 2001)                                                |
o-----------------------------------------------------------------------------o

  - Fixed the bone/vertex/normal transformation pipeline. There was a bug in
    the library and another in the exporter. Together they worked pretty much
    correct, but there were those weird normals in some of the models.
  - Added a user-data member variable and accessors to the CalCoreBone,
    CalCoreMaterial, CalCoreModel and CalModel classes.
  - Finished the LOD handling in the CalRenderer, CalMesh and CalCoreMesh
    classes.
  - Implemented the whole material system with material-sets and -threads.
  - I decided to implement a material class (CalCoreMaterial) and a new file
    type for it (.crf). This should lead to a very flexible material handling.
    (such as swapping materials on the fly on submeshes etc.).
  - Texture coordinates are stored differently in the CalCoreSubmesh class to
    optimize access from the CalRenderer interface.
  - A new class CalRenderer was added that serves as a clean interface for
    the external rendering loop.
  - Fixed all *.cpp files to include config.h if HAVE_CONFIG_H is set.
  - Converted CalModel::getMeshVertices() and CalModel::getMeshNormals() to
    CalModel::getSubmeshVertices() and CalModel::getSubmeshNormals().
  - Created a little model viewer named 'MiniViewer' that can be run from the
    command-line.
  - Complete redesign of the mesh handling. It is now much cleaner and ready
    for LOD (level of detail).
  - Changed the fileformats to include a version info field. Furthermore, the
    magic file cookies were modified to reflect the incompatibility to the
    old fileformat.
  - Fixed a bug in the calculation of the blending factor between two
    keyframes that caused a visible crack in the animation.
  - Added a few accessor functions that are used by the exporter framework.
  - Polished the error class and its error messages a bit.


o-----------------------------------------------------------------------------o
| Version 0.5 (5. May 2001)                                                   |
o-----------------------------------------------------------------------------o

  - Added the CalSaver class which can be used to save skeleton, animation
    and mesh files. This is useful for writing export plugins and storing
    generic created data for later use.
  - Redesign of the core mesh class. It supports different materiels and
    submeshes now. Unlimited (texture-)map channels are possible.
  - 3d Studio Max exporter handles materials and maps.
  - Implemented the second animation type (named 'action').
  - Reorganized the project directory and the workspaces of kdevelop and msvc..
  - Created a little demo (called 'The Cally Demo') based on cal3d and OpenGL.
  - Optimized the keyframe lookup and other STL performance issues.
  - Mesh handling implemented. Vertices and normals are influenced by one or
    more weighted bone states.
  - Switched to simple binary file-formats. This gives a shorter loading time
    and cal3d does not depend on another library.
  - A first 3d Studio Max exporter plugin is born. It can export biped
    animations and colored/textured meshes. It is not very stable though =)
  - Created a first version of an exporter-plugin for Milkshape 3D. This makes
    it a lot easier to get animation files for testing =)
  - Added linear blending between 2 keyframes, this gives smoother animations.
  - Implemented the core animation-track-keyframe structure and extended the
    XML loader to load it.
  - Added the CalMixer class that handles all the animation blending
  - The first type of animation (named 'cycles') is available.
  - Extended the CalVector and CalQuaternion classes with blending functions.
  - A quick-and-dirty test-frontend was added (based on SDL and OpenGL) to see
    the animations on screen.
  - Implemented the core model-skeleton-bone structure and a XML loader for
    it (based on libxml2).
  - The model-skeleton-bone structure that is cloned from the core versions
    for every instance of a specific model was coded.
  - An error handling mechanism is in place.
  - A first port to Win32 was done. Several pieces of not-portable code was
    fixed in the process.


o-----------------------------------------------------------------------------o
| Version 0.0 (17. February 2001)                                             |
o-----------------------------------------------------------------------------o

  - Project kick off.


o-----------------------------------------------------------------------------o
